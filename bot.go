package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"regexp"
	"strconv"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/joho/godotenv"
)

//sub

const adminID int64 = 1 /// change to your admin id

type UserForm struct {
	DepositRange  string
	DepositAmount int
	ReturnType    string // "card" –∏–ª–∏ "crypto"
	Cashback      int
	Bank          string
	CardNumber    string
	CryptoNetwork string
	CryptoAddress string
	ID            string
	Photos        []string
	Step          int
}

var userForms = make(map[int64]*UserForm)

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	dispatcher := func(ctx context.Context, b *bot.Bot, update *models.Update) {
		if update.Message != nil {
			if update.Message.Text == "/start" {
				startHandler(ctx, b, update)
			} else {
				messageHandler(ctx, b, update)
			}
		} else if update.CallbackQuery != nil {
			callbackHandler(ctx, b, update)
		} else {
			defaultHandler(ctx, b, update)
		}
	}

	opts := []bot.Option{
		bot.WithDefaultHandler(dispatcher),
	}
	ERR := godotenv.Load()
	if ERR != nil {
		log.Fatal("Error loading .env file")
	}
	b, err := bot.New(os.Getenv("TELEGRAM"), opts...)
	if err != nil {
		panic(err)
	}
	b.Start(ctx)
}

func startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	kb := &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{{Text: "–æ—Ç 500 –¥–æ 1001 ‚ÇΩ"}},
			{{Text: "–æ—Ç 1001 –¥–æ 1499 ‚ÇΩ"}},
			{{Text: "1500+ ‚ÇΩ"}},
		},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	text := "üëã–ü—Ä–∏–≤–µ—Ç " + update.Message.From.FirstName + " !\n\n" +
		"–≠—Ç–æ –±–æ—Ç –¥–ª—è –∫—ç—à–±–µ–∫–∞ –º–æ–∏–º —Ä–µ—Ñ–∞–º. –°–ª–µ–¥—É–π –¥–∞–ª—å–Ω–µ–π—à–∏–º —à–∞–≥–∞–º, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É." +
		"\n\nüéÅ –∞–Ω–æ–Ω—Å—ã + —Ä–æ–∑—ã–≥—Ä—ã—à–∏ --> @mlaffon" +
		"\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –¥–µ–ø–æ–∑–∏—Ç –≤—ã —Å–¥–µ–ª–∞–ª–∏:"

	mediaGroup := []models.InputMedia{
		&models.InputMediaPhoto{
			Media:   "https://i.ibb.co/N2VP8zjx/promo.webp",
			Caption: text,
		},
	}

	_, err := b.SendMediaGroup(ctx, &bot.SendMediaGroupParams{
		ChatID: update.Message.Chat.ID,
		Media:  mediaGroup,
	})
	if err != nil {
		log.Printf("Error sending media group: %v", err)
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        "üëá –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
		ReplyMarkup: kb,
	})

	userForms[update.Message.Chat.ID] = &UserForm{Step: 1}
}

func sendReturnTypeButtons(ctx context.Context, b *bot.Bot, chatID int64) {
	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{Text: "–ö–∞—Ä—Ç–∞ üí≥", CallbackData: "return_card"},
				{Text: "–ö—Ä–∏–ø—Ç–∞ ‚Çø", CallbackData: "return_crypto"},
			},
		},
	}
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatID,
		Text:        "–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç?",
		ReplyMarkup: kb,
	})
}

func callbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.CallbackQuery == nil {
		return
	}
	chatID := update.CallbackQuery.From.ID

	if strings.HasPrefix(update.CallbackQuery.Data, "reply_") {
		userIDStr := strings.TrimPrefix(update.CallbackQuery.Data, "reply_")
		userID, _ := strconv.ParseInt(userIDStr, 10, 64)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   "–ê–¥–º–∏–Ω —Ö–æ—á–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ.",
		})
		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
		})
		return
	}

	if strings.HasPrefix(update.CallbackQuery.Data, "paid_") {
		userIDStr := strings.TrimPrefix(update.CallbackQuery.Data, "paid_")
		userID, _ := strconv.ParseInt(userIDStr, 10, 64)

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞! üí∏ –î–µ–Ω—å–≥–∏ —Å–∫–æ—Ä–æ –ø—Ä–∏–¥—É—Ç.",
		})

		b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: update.CallbackQuery.ID,
			Text:            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è ‚úÖ",
			ShowAlert:       false,
		})
		return
	}

	form, ok := userForms[chatID]
	if !ok {
		return
	}

	switch update.CallbackQuery.Data {
	case "return_card":
		form.ReturnType = "card"
		form.Step = 21
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):",
		})
	case "return_crypto":
		form.ReturnType = "crypto"
		form.Step = 22
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: TRC20, ERC20, BSC):",
		})

	case "confirm_data":
		form.Step = 4

		mediaGroup := []models.InputMedia{
			&models.InputMediaPhoto{
				Media: "https://i.ibb.co/JwNNpKVR/trans.webp",
				Caption: `–ü—Ä–∏—à–ª–∏—Ç–µ 2 —Å–∫—Ä–∏–Ω–∞:
	1. –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –≥–¥–µ –≤–∏–¥–Ω–æ –≤–∞—à ID –∏ –±–∞–ª–∞–Ω—Å.
	2. –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ‚Äî –≤–∫–ª–∞–¥–∫–∞ "–î–µ–ø–æ–∑–∏—Ç—ã", –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.
	
	–°–∫—Ä–∏–Ω—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ –º–æ–µ–π —Ä–µ—Ñ–∫–µ.`,
			},
			&models.InputMediaPhoto{
				Media: "https://i.ibb.co/s9t2MBK8/profile.webp",
			},
		}

		_, err := b.SendMediaGroup(ctx, &bot.SendMediaGroupParams{
			ChatID: chatID,
			Media:  mediaGroup,
		})
		if err != nil {
			log.Printf("Error sending media group: %v", err)
		}

	case "edit_data":
		form.Step = 1
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π –¥–µ–ø–æ–∑–∏—Ç –≤—ã –∑–∞–∫–∏–Ω—É–ª–∏:",
			ReplyMarkup: &models.ReplyKeyboardMarkup{
				Keyboard: [][]models.KeyboardButton{
					// {{Text: "100 - 700 ‚ÇΩ"}},
					{{Text: "–æ—Ç 500 –¥–æ 1000 ‚ÇΩ"}},
					{{Text: "–æ—Ç 1001 –¥–æ 1499 ‚ÇΩ"}},
					// {{Text: "1500 - 2000 ‚ÇΩ"}},
					{{Text: "1500+ ‚ÇΩ"}},
				},
				ResizeKeyboard:  true,
				OneTimeKeyboard: true,
			},
		})
	}

	b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: update.CallbackQuery.ID,
	})
}

func messageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	form, ok := userForms[chatID]
	if !ok {
		return
	}

	switch form.Step {
	case 1:
		form.DepositRange = update.Message.Text
		form.Step = 11

		var percent string
		switch form.DepositRange {
		case "–æ—Ç 500 –¥–æ 1000 ‚ÇΩ":
			percent = "70%"
		case "–æ—Ç 1000 –¥–æ 1499 ‚ÇΩ":
			percent = "50%"
		case "1500+ ‚ÇΩ":
			percent = "30% (‚ö† –º–∞–∫—Å–∏–º—É–º 1500‚ÇΩ)"
		default:
			percent = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		}

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text: "–í—ã –≤—ã–±—Ä–∞–ª–∏: " + form.DepositRange +
				"\n–ö—ç—à–±—ç–∫ –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: " + percent +
				"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:",
		})

	case 11:
		amount, err := strconv.Atoi(update.Message.Text)
		if err != nil || amount <= 0 {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).",
			})
			return
		}

		valid := false
		switch form.DepositRange {
		case "–æ—Ç 500 –¥–æ 1000 ‚ÇΩ":
			if amount >= 500 && amount <= 1000 {
				valid = true
				form.Cashback = amount * 70 / 100
			}
		case "–æ—Ç 1001 –¥–æ 1499 ‚ÇΩ":
			if amount >= 1001 && amount <= 1499 {
				valid = true
				form.Cashback = amount * 50 / 100
			}
		case "1500+ ‚ÇΩ":
			if amount >= 1500 {
				valid = true
				form.Cashback = amount * 30 / 100
				if form.Cashback > 1500 {
					form.Cashback = 1500
				}
			}
		}

		if !valid {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–°—É–º–º–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
			})
			return
		}

		form.DepositAmount = amount
		form.Step = 2
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ö—ç—à–±—ç–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç: " + strconv.Itoa(form.Cashback) + " ‚ÇΩ.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç:",
		})
		sendReturnTypeButtons(ctx, b, chatID)

	case 21:
		cardNumber := update.Message.Text
		matched, _ := regexp.MatchString(`^\d{16}$`, cardNumber)
		if !matched {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ 16 —Ü–∏—Ñ—Ä:",
			})
			return
		}
		form.CardNumber = cardNumber
		form.Step = 211
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:",
		})
	case 211:
		form.Bank = update.Message.Text
		form.Step = 3
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ ID:",
		})

	// –ö—Ä–∏–ø—Ç–∞
	case 22:
		form.CryptoNetwork = update.Message.Text
		form.Step = 221
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:",
		})
	case 221:
		form.CryptoAddress = update.Message.Text
		form.Step = 3
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ ID:",
		})

		// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	case 3:
		id := update.Message.Text
		matched, _ := regexp.MatchString(`^\d+$`, id)
		if !matched {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:",
			})
			return
		}

		form.ID = id

		preview := "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" +
			"üí∞ –î–µ–ø–æ–∑–∏—Ç: " + strconv.Itoa(form.DepositAmount) + " ‚ÇΩ (" + form.DepositRange + ")\n" +
			"üéÅ –ö—ç—à–±—ç–∫: " + strconv.Itoa(form.Cashback) + " ‚ÇΩ\n" +
			"üí≥ –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞: "
		if form.ReturnType == "card" {
			preview += "–ö–∞—Ä—Ç–∞\n" +
				"üè¶ –ë–∞–Ω–∫: " + form.Bank + "\n" +
				"üî¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + form.CardNumber + "\n"
		} else {
			preview += "–ö—Ä–∏–ø—Ç–∞\n" +
				"üåê –°–µ—Ç—å: " + form.CryptoNetwork + "\n" +
				"üíº –ê–¥—Ä–µ—Å: " + form.CryptoAddress + "\n"
		}
		preview += "üë§ ID: " + form.ID + "\n\n" +
			"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–í—Å—ë –≤–µ—Ä–Ω–æ¬ª.\n" +
			"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª."

		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º
		kb := &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", CallbackData: "confirm_data"},
					{Text: "‚úè –ò–∑–º–µ–Ω–∏—Ç—å", CallbackData: "edit_data"},
				},
			},
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      chatID,
			Text:        preview,
			ReplyMarkup: kb,
		})

	// –§–æ—Ç–æ
	case 4:
		if len(update.Message.Photo) > 0 {
			fileID := update.Message.Photo[len(update.Message.Photo)-1].FileID
			form.Photos = append(form.Photos, fileID)
			if len(form.Photos) == 1 {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
				})
			}
		} else if update.Message.Text == "/done" {
			if len(form.Photos) == 0 {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: chatID,
					Text:   "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.",
				})
				return
			}
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
			})
			sendFormToAdmin(ctx, b, form, chatID, update.Message.From.Username)
			delete(userForms, chatID)
		} else {
			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: chatID,
				Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—ã –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª.",
			})
		}
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
func sendFormToAdmin(ctx context.Context, b *bot.Bot, form *UserForm, userID int64, username string) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
	text := "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n" +
		"–î–µ–ø–æ–∑–∏—Ç: " + form.DepositRange + "\n" +
		"–í–æ–∑–≤—Ä–∞—Ç: " + form.ReturnType + "\n" +
		"–ö—ç—à–±—ç–∫: " + strconv.Itoa(form.Cashback) + " ‚ÇΩ\n"

	if form.ReturnType == "card" {
		text += "–ë–∞–Ω–∫: " + form.Bank + "\n" +
			"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: " + form.CardNumber + "\n"
	} else if form.ReturnType == "crypto" {
		text += "–°–µ—Ç—å: " + form.CryptoNetwork + "\n" +
			"–ê–¥—Ä–µ—Å: " + form.CryptoAddress + "\n"
	}

	text += "ID: " + form.ID

	kb := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
					URL:  "https://t.me/" + username,
				},
			},
			{
				{
					Text:         "–û–ø–ª–∞—Ç–∏–ª ‚úÖ",
					CallbackData: "paid_" + strconv.FormatInt(userID, 10),
				},
			},
		},
	}

	if len(form.Photos) > 0 {

		media := make([]models.InputMedia, 0, len(form.Photos))
		for i, fileID := range form.Photos {
			if i == 0 {
				media = append(media, &models.InputMediaPhoto{
					Media:   fileID,
					Caption: text,
				})
			} else {
				media = append(media, &models.InputMediaPhoto{
					Media: fileID,
				})
			}
		}

		b.SendMediaGroup(ctx, &bot.SendMediaGroupParams{
			ChatID: adminID,
			Media:  media,
		})

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      adminID,
			Text:        "‚¨ÜÔ∏è –ó–∞—è–≤–∫–∞ –≤—ã—à–µ",
			ReplyMarkup: kb,
		})
	} else {

		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID:      adminID,
			Text:        text,
			ReplyMarkup: kb,
		})
	}
}

func defaultHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π.",
		})
	}
}
